#!/bin/bash

currentDirectory=$(pwd) # Get the current directory
currentDirectory=${currentDirectory%builders} #Remove the builders folder, if it exists, from the directory
projectName=${currentDirectory##*/} # Get the "project" name
operatingSystem=$(lsb_release -is) # Get the short name for the operating system in use
source "$currentDirectory/builders/tsFunctions" # Import Functions Dependency

# Node / NPM & Package Manager Checking

isNodeInstalled=true #Default to true, will change to false otherwise

if [ ! -f /usr/bin/nodejs ]; then # If nodejs does not exist
	if [ ! -f /usr/bin/node ]; then If nodejs is most certainly not installed
		isNodeInstalled=false
	fi
elif [ -f /usr/bin/nodejs ]; then # If nodejs is installed
	if [ ! -f /usr/bin/node ]; then # If nodejs is installed but not properly symlinked
		sudo ln -s /usr/bin/nodejs /usr/bin/node
	fi
fi

if [ $isNodeInstalled = false ]; then # If Node.JS and typically NPM (since nodejs is a dep of npm) are not installed

	cd /home/"$USER"/ # Go to the home directory of the user

	if [ -f /usr/bin/apt-get ]; then # If the user is using apt-get for package management
		sudo apt-get install -y nodejs npm
	elif [ -f /usr/bin/pacman ]; then # If the user is using pacman for package management
		sudo pacman -S nodejs npm
	elif [ -f /usr/bin/yum ]; then  # If the user is using yum for package management
		sudo yum install nodejs npm
	elif [ -f /usr/bin/zypper ]; then #If the user is using zypper for package management
		sudo zypper install nodejs npm
	fi

fi

# End of Node / NPM & Package Manager Checking

if [ ! -f /usr/bin/tsc ]; then # If the Typescript compiler is NOT installed
	cd /home/"$USER"/ #Go to the user's home directory to ensure node_modules are install in node_modules
	npm install typescript@0.9.7 # Install Typescript via NPM
	sudo ln -s /home/"$USER"/node_modules/typescript/bin/tsc /usr/bin/tsc # Ensure Typescript Compiler is symlinked
fi

if [ ! -f /usr/bin/yuicompressor ]; then # If yuicompressor is NOT installed
	cd /home/"$USER"/ #Go to the user's home directory to ensure node_modules are install
	npm install yuicompressor # Install yuicompressor via NPM
	sudo ln -s /home/"$USER"/node_modules/yuicompressor/nodejs/cli.js /usr/bin/yuicompressor # Ensure yuicompressor is symlinked
fi

cd "$currentDirectory" # Go to the current directory if we are not already in it
allTSFiles=$(find -name "*.ts") # Get all Typescript files recursively

for file in $allTSFiles; do
	if [[ "$file" != *.d.ts ]]; then # If it is not a declaration file (exists after using tsCompile once)
		fileNameWithoutPathRemnant="${file#./}" # Remove the ./ from the directory
		fileNameWithoutExtension="${fileNameWithoutPathRemnant%.*}" # Remove everything after the last .

		echo "------$fileNameWithoutPathRemnant-----"
		echo "Checking if this file is new or has been changed."

		fileChanged $fileNameWithoutPathRemnant

		if [ $FILE_CHANGED == "CHANGED" ]; then # If the file has been changed
			echo "File is new or has been changed. Now compiling from Typescript to Javascript."
			tsc --removeComments --target 'ES5' "$fileNameWithoutPathRemnant" --declaration --out "$fileNameWithoutExtension.js"
			echo "Minifying $fileNameWithoutExtension.js to $fileNameWithoutExtension.min.js"
			yuicompressor --type=js "$fileNameWithoutExtension.js" -o "$fileNameWithoutExtension.min.js" &> /dev/null
			echo "Finished compiling and minification process of $fileNameWithoutPathRemnant"
		else
			echo "File is not new or has not been changed."
		fi

		printf "\n" # Since we may have multiple files we are compiling and compressing, let's put a break between each file segment to make it more readable.
	fi
done

if [ -f "$currentDirectory/builders/tsHook" ]; then # If tsHook exists, we will execute the file (it acts as a post-compile hook)
	source "$currentDirectory/builders/tsHook"
	hook
fi

if [[ "$operatingSystem" == "Ubuntu" ]]; then # If the operating system is Ubuntu
	notify-send "Compiler process is finished." "Compiling of code in $projectName is finished." # Provide a notification
fi
