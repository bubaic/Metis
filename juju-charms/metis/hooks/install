#!/bin/bash
set -e # If any command fails, stop execution.

installAtlasUI(){ #Function to pull and install AtlasUI Web Framework
	atlasui="https://github.com/JoshStrobl/AtlasUI/raw/master/stable.zip" # Define the AtlasUI stable.zip to download
	wget "$atlasui" -O /tmp/atlasui.zip

	# Install AtlasUI Web Framework
	echo "Installing AtlasUI"

	unzip /tmp/atlasui.zip -d /var/www/ # Extract Metis to /var/www/AtlasUI
	rm -f /tmp/atlasui.zip # Remove atlasui.zip
}

installMetis(){ #Function to pull and install Metis
	metis="https://github.com/StroblIndustries/Metis/raw/master/stable.zip" # Define the Metis stable.zip to download
	wget "$metis" -O /tmp/metis.zip

	# Install Metis
	echo "Installing Metis"

	unzip /tmp/metis.zip -d /var/www/ # Extract Metis to /var/www/Metis
	rm -f /tmp/metis.zip # Remove metis.zip
}

apt-get install -y wget unzip

atlasuiVersionUrl="https://github.com/JoshStrobl/AtlasUI/raw/master/VERSION.txt" # Define the AtlasUI VERSION to download
metisVersionUrl="https://github.com/StroblIndustries/Metis/raw/master/VERSION.txt" # Define the Metis VERSION to download

wget "$atlasuiVersionUrl" -O /tmp/atlasuiVersion.txt
wget "$metisVersionUrl" -O /tmp/metisVersion.txt

newestAtlasUIVersion=$(</tmp/atlasuiVersion.txt) # Get the newest AtlasUI version
newestMetisVersion=$(</tmp/metisVersion.txt) # Get the newest Metis version

# Check for existing installs
echo "Checking for existing Metis installs"

if [ -f /var/www/Metis/framework.php ]; then #If Metis is already installed (meaning AtlasUI is already installed)
	currentAtlasUIVersion=$(</var/www/AtlasUI/VERSION.txt) # Get the current AtlasUI version that is already installed
	currentMetisVersion=$(</var/www/Metis/VERSION.txt) # Get the current Metis version that is already installed 

	if [ "$newestAtlasUIVersion" != "$currentAtlasUIVersion" ]; then # If the current version of AtlasUI is not the latest
		echo "Found an existing but outdated AtlasUI install. Updating now."
		rm -rf /var/www/AtlasUI # Remove old AtlasUI Web Framework
		installAtlasUI # Install AtlasUI
	else
		echo "Found an existing and up-to-date AtlasUI install. Doing nothing."
	fi	
	
	if [ "$newestMetisVersion" != "$currentMetisVersion" ]; then # If the current version of Metis is not the latest
		echo "Found an existing but outdated Metis install. Updating now."

		cp /var/www/Metis/nodeList.json /tmp/ # Copy nodeList.json
		mv -r /var/www/Metis/data /tmp/ # Copy over existing data
		rm -rf /var/www/Metis # Uninstall Metis

		installMetis # Reinstall Metis

		# Re-install any old data
		echo "Copying over old Metis config and data"
		mv -f /tmp/nodeList.json /var/www/Metis/ # Copy over old nodeList.json
		mv -rf /tmp/data /var/www/Metis # Copy over Metis data folder
	else
		echo "Found an existing and up-to-date Metis install. Doing nothing."
	fi
else #If Metis is NOT already installed
	echo "Found no Metis install. Doing fresh-install run."

	# Dependency Checking (No sense in re-installing dependencies)

	echo "Doing some dependency checking."

	preferredEngine=$(config-get engine)

	if [ "$preferredEngine" == "nginx" ]; then # If engine is nginx
		apt-get install -y nginx php5 php5-fpm php5-curl
	elif [ "$preferredEngine" == "apache2" ]; then #If engine is apache(2)
		apt-get install -y apache2 php5-cgi curl libapache2-mod-php5 php5-cli php5-curl
	fi

	# End of Dependency Checking

	mkdir -p /var/www/
	chmod -R 1777 /var/www/

	installAtlasUI #Install AtlasUI (fresh install)
	installMetis #Install Metis (fresh install)
fi

rm -f /tmp/metisVersion.txt #Removing metisVersion.txt
echo "Metis is done installing / updating."
